{"ast":null,"code":"var _jsxFileName = \"/Users/joselaro/Documents/Documents - Jose\\u2019s MacBook Pro (2)/J.Laro/the-psalmist-app/psalmist_frontend/src/songs/EditSongModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport M from \"materialize-css/dist/js/materialize.min.js\";\nimport { updateSong } from \"../actions/songActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditSongModal = ({\n  current,\n  updateSong\n}) => {\n  _s();\n\n  const [title, setTitle] = useState(\"\");\n  const [intro, setIntro] = useState(\"\");\n  const [verse, setVerse] = useState(\"\");\n  const [chorus, setChorus] = useState(\"\");\n  useEffect(() => {\n    if (current) {\n      setTitle(current.title);\n      setIntro(current.intro);\n      setVerse(current.verse);\n      setChorus(current.chorus);\n    }\n  }, [current]);\n\n  const onSubmit = () => {\n    if (title === \"\") {\n      M.toast({\n        html: \"What is the title of your Song?\"\n      });\n    } else {\n      const updSong = {\n        id: current.id,\n        title,\n        intro,\n        verse,\n        chorus,\n        date: new Date()\n      };\n      updateSong(updSong);\n      M.toast({\n        html: `${title} was updated`\n      }); //clear fields\n\n      setTitle(\"\");\n      setIntro(\"\");\n      setVerse(\"\");\n      setChorus(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"edit-song-modal\",\n    className: \"modal\",\n    style: {\n      width: \"50%\",\n      height: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Songs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"title\",\n            value: title,\n            onChange: e => setTitle(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"title\",\n            className: \"active\",\n            children: \"Song Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"intro\",\n            value: intro,\n            onChange: e => setIntro(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"intro\",\n            className: \"active\",\n            children: \"Intro\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"verse\",\n            value: verse,\n            onChange: e => setVerse(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"verse\",\n            className: \"active\",\n            children: \"Verse\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"chorus\",\n            value: chorus,\n            onChange: e => setChorus(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"chorus\",\n            className: \"active\",\n            children: \"Chorus\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"'#!\",\n        onClick: onSubmit,\n        className: \"modal-close waves-effect green btn\",\n        children: \" ENTER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditSongModal, \"q9GQyoVMa6MgHZedSqnhjeWulWI=\");\n\n_c = EditSongModal;\nEditSongModal.propTypes = {\n  addSong: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  current: state.song.current\n});\n\nexport default connect(mapStateToProps, {\n  updateSong\n})(EditSongModal);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditSongModal\");","map":{"version":3,"sources":["/Users/joselaro/Documents/Documents - Joseâ€™s MacBook Pro (2)/J.Laro/the-psalmist-app/psalmist_frontend/src/songs/EditSongModal.js"],"names":["React","useState","connect","PropTypes","M","updateSong","EditSongModal","current","title","setTitle","intro","setIntro","verse","setVerse","chorus","setChorus","useEffect","onSubmit","toast","html","updSong","id","date","Date","width","height","e","target","value","propTypes","addSong","func","isRequired","mapStateToProps","state","song"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,CAAP,MAAc,4CAAd;AACA,SAASC,UAAT,QAA2B,wBAA3B;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWF,EAAAA;AAAX,CAAD,KAA6B;AAAA;;AACjD,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;AAGAe,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIT,OAAJ,EAAa;AACXE,MAAAA,QAAQ,CAACF,OAAO,CAACC,KAAT,CAAR;AACAG,MAAAA,QAAQ,CAACJ,OAAO,CAACG,KAAT,CAAR;AACAG,MAAAA,QAAQ,CAACN,OAAO,CAACK,KAAT,CAAR;AACAG,MAAAA,SAAS,CAACR,OAAO,CAACO,MAAT,CAAT;AACH;AACF,GAPU,EAOT,CAACP,OAAD,CAPS,CAAT;;AAUA,QAAMU,QAAQ,GAAG,MAAM;AACrB,QAAIT,KAAK,KAAK,EAAd,EAAkB;AAChBJ,MAAAA,CAAC,CAACc,KAAF,CAAQ;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAR;AACD,KAFD,MAEO;AACL,YAAMC,OAAO,GAAG;AACdC,QAAAA,EAAE,EAAEd,OAAO,CAACc,EADE;AAEdb,QAAAA,KAFc;AAGdE,QAAAA,KAHc;AAIdE,QAAAA,KAJc;AAKdE,QAAAA,MALc;AAMdQ,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AANQ,OAAhB;AASAlB,MAAAA,UAAU,CAACe,OAAD,CAAV;AACAhB,MAAAA,CAAC,CAACc,KAAF,CAAQ;AAAEC,QAAAA,IAAI,EAAG,GAAEX,KAAM;AAAjB,OAAR,EAXK,CAaL;;AACAC,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,SAAS,CAAC,EAAD,CAAT;AACD;AACF,GAtBD;;AAwBA,sBACE;AACE,IAAA,EAAE,EAAC,iBADL;AAEE,IAAA,SAAS,EAAC,OAFZ;AAGE,IAAA,KAAK,EAAE;AAAES,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,MAAM,EAAE;AAAxB,KAHT;AAAA,4BAKE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,IAAI,EAAC,OAFP;AAGE,YAAA,KAAK,EAAEjB,KAHT;AAIE,YAAA,QAAQ,EAAGkB,CAAD,IAAOjB,QAAQ,CAACiB,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ3B;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE;AAAO,YAAA,OAAO,EAAC,OAAf;AAAuB,YAAA,SAAS,EAAC,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAHF,eAgBE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,IAAI,EAAC,OAFP;AAGE,YAAA,KAAK,EAAElB,KAHT;AAIE,YAAA,QAAQ,EAAGgB,CAAD,IAAOf,QAAQ,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ3B;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE;AAAO,YAAA,OAAO,EAAC,OAAf;AAAuB,YAAA,SAAS,EAAC,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAhBF,eA6BE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,IAAI,EAAC,OAFP;AAGE,YAAA,KAAK,EAAEhB,KAHT;AAIE,YAAA,QAAQ,EAAGc,CAAD,IAAOb,QAAQ,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ3B;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE;AAAO,YAAA,OAAO,EAAC,OAAf;AAAuB,YAAA,SAAS,EAAC,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA7BF,eA0CE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,IAAI,EAAC,QAFP;AAGE,YAAA,KAAK,EAAEd,MAHT;AAIE,YAAA,QAAQ,EAAGY,CAAD,IAAOX,SAAS,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ5B;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE;AAAO,YAAA,OAAO,EAAC,QAAf;AAAwB,YAAA,SAAS,EAAC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA1CF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eA6DE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AACE,QAAA,IAAI,EAAC,KADP;AAEE,QAAA,OAAO,EAAEX,QAFX;AAGE,QAAA,SAAS,EAAC,oCAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA7DF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuED,CAhHD;;GAAMX,a;;KAAAA,a;AAiHNA,aAAa,CAACuB,SAAd,GAA0B;AACxBC,EAAAA,OAAO,EAAE3B,SAAS,CAAC4B,IAAV,CAAeC;AADA,CAA1B;;AAIE,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClC3B,EAAAA,OAAO,EAAE2B,KAAK,CAACC,IAAN,CAAW5B;AADc,CAAZ,CAAxB;;AAKA,eAAeL,OAAO,CAAC+B,eAAD,EAAkB;AAAE5B,EAAAA;AAAF,CAAlB,CAAP,CAAyCC,aAAzC,CAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport M from \"materialize-css/dist/js/materialize.min.js\";\nimport { updateSong } from \"../actions/songActions\";\n\nconst EditSongModal = ({ current, updateSong }) => {\n  const [title, setTitle] = useState(\"\");\n  const [intro, setIntro] = useState(\"\");\n  const [verse, setVerse] = useState(\"\");\n  const [chorus, setChorus] = useState(\"\");\n\n\n  useEffect(() => {\n    if (current) {\n      setTitle(current.title);\n      setIntro(current.intro);\n      setVerse(current.verse);\n      setChorus(current.chorus)\n  }\n},[current])\n\n\n  const onSubmit = () => {\n    if (title === \"\") {\n      M.toast({ html: \"What is the title of your Song?\" });\n    } else {\n      const updSong = {\n        id: current.id,\n        title,\n        intro,\n        verse,\n        chorus,\n        date: new Date(),\n      };\n\n      updateSong(updSong);\n      M.toast({ html: `${title} was updated` });\n\n      //clear fields\n      setTitle(\"\");\n      setIntro(\"\");\n      setVerse(\"\");\n      setChorus(\"\");\n    }\n  }\n\n  return (\n    <div\n      id=\"edit-song-modal\"\n      className=\"modal\"\n      style={{ width: \"50%\", height: \"auto\" }}\n    >\n      <div className=\"modal-content\">\n        <h4>Songs</h4>\n        <br />\n        <div className=\"row\">\n          <div className=\"input-field\">\n            <input\n              type=\"text\"\n              name=\"title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n            <label htmlFor=\"title\" className=\"active\">\n              Song Title\n            </label>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"input-field\">\n            <input\n              type=\"text\"\n              name=\"intro\"\n              value={intro}\n              onChange={(e) => setIntro(e.target.value)}\n            />\n            <label htmlFor=\"intro\" className=\"active\">\n              Intro\n            </label>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"input-field\">\n            <input\n              type=\"text\"\n              name=\"verse\"\n              value={verse}\n              onChange={(e) => setVerse(e.target.value)}\n            />\n            <label htmlFor=\"verse\" className=\"active\">\n              Verse\n            </label>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"input-field\">\n            <input\n              type=\"text\"\n              name=\"chorus\"\n              value={chorus}\n              onChange={(e) => setChorus(e.target.value)}\n            />\n            <label htmlFor=\"chorus\" className=\"active\">\n              Chorus\n            </label>\n          </div>\n        </div>\n      </div>\n      <div className=\"modal-footer\">\n        <a\n          href=\"'#!\"\n          onClick={onSubmit}\n          className=\"modal-close waves-effect green btn\"\n        > ENTER</a>\n      </div>\n    </div>\n  );\n};\nEditSongModal.propTypes = {\n  addSong: PropTypes.func.isRequired,\n}\n  \n  const mapStateToProps = (state) => ({\n    current: state.song.current\n  })\n  \n\n  export default connect(mapStateToProps, { updateSong })(EditSongModal);\n"]},"metadata":{},"sourceType":"module"}