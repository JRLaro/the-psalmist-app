{"ast":null,"code":"import axios from \"axios\";\nimport { GET_SONGS, SET_LOADING, SONGS_ERROR, ADD_SONG, DELETE_SONG, UPDATE_SONG, SET_CURRENT, CLEAR_CURRENT } from \"./types\"; //get song from db.json\n\nexport const getSongs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await axios.get(\"/songs\");\n    dispatch({\n      type: GET_SONGS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SONGS_ERROR,\n      payload: err.response.data\n    });\n  }\n}; //add songs\n\nexport const addSong = song => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    setLoading();\n    const res = await axios.post(\"/songs\", song, config);\n    dispatch({\n      type: ADD_SONG,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SONGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; //update song\n\nexport const updateSong = song => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    setLoading();\n    const res = await axios.put(`/songs/${song.id}`, song, config);\n    dispatch({\n      type: UPDATE_SONG,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SONGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; //delete song\n\nexport const deleteSong = id => async dispatch => {\n  try {\n    setLoading();\n    const res = await axios.delete(`/songs/${id}`);\n    dispatch({\n      type: DELETE_SONG,\n      payload: id\n    });\n  } catch (err) {\n    dispatch({\n      type: SONGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; //set current song\n\nexport const setCurrent = song => {\n  return {\n    type: SET_CURRENT,\n    payload: song\n  };\n}; //clear current song\n\nexport const clearCurrent = () => {\n  return {\n    type: CLEAR_CURRENT\n  };\n}; //set loading --> true\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/joselaro/Documents/Documents - Joseâ€™s MacBook Pro (2)/J.Laro/the-psalmist-app/psalmist_frontend/client/src/actions/songs.js"],"names":["axios","GET_SONGS","SET_LOADING","SONGS_ERROR","ADD_SONG","DELETE_SONG","UPDATE_SONG","SET_CURRENT","CLEAR_CURRENT","getSongs","dispatch","setLoading","res","get","type","payload","data","err","response","addSong","song","config","headers","post","statusText","updateSong","put","id","deleteSong","delete","setCurrent","clearCurrent"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {\n  GET_SONGS,\n  SET_LOADING,\n  SONGS_ERROR,\n  ADD_SONG,\n  DELETE_SONG,\n  UPDATE_SONG,\n  SET_CURRENT,\n  CLEAR_CURRENT\n} from \"./types\";\n\n//get song from db.json\nexport const getSongs = () => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await axios.get(\"/songs\");\n    dispatch({\n      type: GET_SONGS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: SONGS_ERROR,\n      payload: err.response.data,\n    });\n  }\n};\n\n//add songs\nexport const addSong = (song) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    setLoading();\n\n    const res = await axios.post(\"/songs\", song, config);\n\n    dispatch({\n      type: ADD_SONG,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: SONGS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n//update song\nexport const updateSong = (song) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  try {\n    setLoading();\n\n    const res = await axios.put(`/songs/${song.id}`, song, config);\n\n    dispatch({\n      type: UPDATE_SONG,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: SONGS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n//delete song\nexport const deleteSong = (id) => async (dispatch) => {\n  try {\n    setLoading();\n\n    const res = await axios.delete(`/songs/${id}`);\n\n    dispatch({\n      type: DELETE_SONG,\n      payload: id,\n    });\n  } catch (err) {\n    dispatch({\n      type: SONGS_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n//set current song\nexport const setCurrent = (song) => {\n  return {\n    type: SET_CURRENT,\n    payload: song\n  }\n}\n\n//clear current song\nexport const clearCurrent = () => {\n  return {\n    type: CLEAR_CURRENT,\n  }\n}\n\n\n//set loading --> true\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}